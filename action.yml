# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Deploy to Cloud Run'
author: 'Google LLC'
description: |-
  Use this action to deploy a container or source code to Google Cloud Run.

inputs:
  service:
    description: |-
      ID of the service or fully-qualified identifier of the service. This is
      required unless providing `metadata` or `job`.
    required: false

  job:
    description: |-
      ID of the job or fully-qualified identifier of the job. This is required
      unless providing `metadata` or `service`.
    required: false

  metadata:
    description: |-
      YAML service description for the Cloud Run service. This is required
      unless providing `service` or `job`.
    required: false

  image:
    description: |-
      (Required, unless providing `metadata` or `source`) Fully-qualified name
      of the container image to deploy. For example:

          gcr.io/cloudrun/hello:latest

      or

          us-docker.pkg.dev/my-project/my-container/image:1.2.3
    required: false

  source:
    description: |-
      (Required, unless providing `metadata`, `image`, or `job`) Path to source
      to deploy. If specified, this will deploy the Cloud Run service from the
      code specified at the given source directory.

      Learn more about the required permissions in [Deploying from source
      code](https://cloud.google.com/run/docs/deploying-source-code).
    required: false

  suffix:
    description: |-
      String suffix to append to the revision name. Revision names always start
      with the service name automatically. For example, specifying 'v1' for a
      service named 'helloworld', would lead to a revision named
      'helloworld-v1'.
    required: false

  env_vars:
    description: |-
      List of environment variables that should be set in the environment.
      These are comma-separated or newline-separated `KEY=VALUE`. Keys or values
      that contain separators must be escaped with a backslash (e.g. `\,` or
      `\\n`) unless quoted. Any leading or trailing whitespace is trimmed unless
      values are quoted.

          env_vars: |-
            FRUIT=apple
            SENTENCE=" this will retain leading and trailing spaces "

      This value will only be set if the input is a non-empty value. If a
      non-empty value is given, the field values will be overwritten (not
      merged). To remove all values, set the value to the literal string `{}`.

      If both `env_vars` and `env_vars_file` are specified, the keys in
      `env_vars` will take precendence over the keys in `env_vars_files`.
    required: false

  env_vars_file:
    description: |-
      Path to a file on disk, relative to the workspace, that defines
      environment variables. The file can be newline-separated KEY=VALUE pairs,
      JSON, or YAML format. If both `env_vars` and `env_vars_file` are
      specified, the keys in env_vars will take precendence over the keys in
      env_vars_files.

          NAME=person
          EMAILS=foo@bar.com\,zip@zap.com

      When specified as KEY=VALUE pairs, the same escaping rules apply as
      described in `env_vars`. You do not have to escape YAML or JSON.

      If both `env_vars` and `env_vars_file` are specified, the keys in
      `env_vars` will take precendence over the keys in `env_vars_files`.

      **⚠️ DEPRECATION NOTICE:** This input is deprecated and will be removed in
      the next major version release.
    required: false

  env_vars_update_strategy:
    description: |-
      Controls how the environment variables are set on the Cloud Run service.
      If set to "merge", then the environment variables are _merged_ with any
      upstream values. If set to "overwrite", then all environment variables on
      the Cloud Run service will be replaced with exactly the values given by
      the GitHub Action (making it authoritative).
    default: 'merge'
    required: true

  secrets:
    description: |-
      List of KEY=VALUE pairs to use as secrets. These are comma-separated or
      newline-separated `KEY=VALUE`. Keys or values that contain separators must
      be escaped with a backslash (e.g. `\,` or `\\n`) unless quoted. Any
      leading or trailing whitespace is trimmed unless values are quoted.

      These can either be injected as environment variables or mounted as
      volumes. Keys starting with a forward slash '/' are mount paths. All other
      keys correspond to environment variables:

          with:
            secrets: |-
              # As an environment variable:
              KEY1=secret-key-1:latest

              # As a volume mount:
              /secrets/api/key=secret-key-2:latest

      This value will only be set if the input is a non-empty value. If a
      non-empty value is given, the field values will be overwritten (not
      merged). To remove all values, set the value to the literal string `{}`.
    required: false

  secrets_update_strategy:
    description: |-
      Controls how the secrets are set on the Cloud Run service. If set to
      `merge`, then the secrets are merged with any upstream values. If set to
      `overwrite`, then all secrets on the Cloud Run service will be replaced
      with exactly the values given by the GitHub Action (making it
      authoritative).
    default: 'merge'
    required: true

  labels:
    description: |-
      List of labels that should be set on the function. These are
      comma-separated or newline-separated `KEY=VALUE`. Keys or values that
      contain separators must be escaped with a backslash (e.g. `\,` or `\\n`)
      unless quoted. Any leading or trailing whitespace is trimmed unless values
      are quoted.

          labels: |-
            labela=my-label
            labelb=my-other-label

      This value will only be set if the input is a non-empty value. If a
      non-empty value is given, the field values will be overwritten (not
      merged). To remove all values, set the value to the literal string `{}`.

      Google Cloud restricts the allowed values and length for labels. Please
      see the Google Cloud documentation for labels for more information.
    required: false

  skip_default_labels:
    description: |-
      Skip applying the special annotation labels that indicate the deployment
      came from GitHub Actions. The GitHub Action will automatically apply the
      following labels which Cloud Run uses to enhance the user experience:

          managed-by: github-actions
          commit-sha: <sha>

      Setting this to `true` will skip adding these special labels.
    required: false
    default: 'false'

  tag:
    description: |-
      Traffic tag to assign to the newly-created revision.
    required: false

  timeout:
    description: |-
      Maximum request execution time, specified as a duration like "10m5s" for
      ten minutes and 5 seconds.
    required: false

  flags:
    description: |-
      Space separate list of other Cloud Run flags. This can be used to access
      features that are not exposed via this GitHub Action.

          with:
            flags: '--add-cloudsql-instances=...'

      Flags that include other flags must quote the _entire_ outer flag value. For
      example, to pass `--args=-X=123`:

          with:
            flags: '--add-cloudsql-instances=... "--args=-X=123"'

      See the [complete list of
      flags](https://cloud.google.com/sdk/gcloud/reference/run/deploy#FLAGS) for
      more information.

      Please note, this GitHub Action does not parse or validate the flags. You
      are responsible for making sure the flags are available on the gcloud
      version and subcommand. When using `tag_traffic` or `revision_traffic`,
      the subcommand is `gcloud run services update-traffic`. For all other
      values, the subcommand is `gcloud run deploy`.
    required: false

  no_traffic:
    description: |-
      If true, the newly deployed revision will not receive traffic.
    default: 'false'
    required: false

  revision_traffic:
    description: |-
      Comma-separated list of revision traffic assignments.

          with:
            revision_traffic: 'my-revision=10' # percentage

      To update traffic to the latest revision, use the special tag "LATEST":

          with:
            revision_traffic: 'LATEST=100'

      This is mutually-exclusive with `tag_traffic`.
    required: false

  tag_traffic:
    description: |-
      Comma-separated list of tag traffic assignments.

          with:
            tag_traffic: 'my-tag=10' # percentage

      This is mutually-exclusive with `revision_traffic`.
    required: false

  project_id:
    description: |-
      ID of the Google Cloud project in which to deploy the service.
    required: false

  region:
    description: |-
      Regions in which the Cloud Run services are deployed. This can be a single
      region or a comma-separated list of regions.
    default: 'us-central1'
    required: false

  gcloud_version:
    description: |-
      Version of the Cloud SDK to install. If unspecified or set to "latest",
      the latest available gcloud SDK version for the target platform will be
      installed. Example: "290.0.1".
    required: false

  gcloud_component:
    description: |-
      Version of the Cloud SDK components to install and use.
    required: false

outputs:
  url:
    description: |-
      The URL of the Cloud Run service.

branding:
  icon: 'chevrons-right'
  color: 'blue'

runs:
  using: 'node20'
  main: 'dist/main/index.js'
